#!/usr/bin/env python3

import argparse
import ipaddress
import socketserver
import socket
import datetime
import sys
import time

this_server_port = 43454  # port that the wg-request server listens on
listen_ip = "0.0.0.0"  # ip address the wg-request server will listen on
pubkey_len = 44
CIDR = '24'
connection_timeout_s = 60  # try to connect for this many seconds in client mode

# server usage example:
# wg-request --serve serverpublickey 10.32.40.0

# client usage example:
# wg-request --port 15820 --private-key clientprivatekey clientpublickey server.host.name

parser = argparse.ArgumentParser(description=f'helps with wireguard client peer provisioning')

parser.add_argument('-p', '--port', type=str, default='15820',
                    help='the port the wireguard server is running on')

parser.add_argument('-k', '--private-key', type=str, default='',
                    help='insert this private key into the client config file')

parser.add_argument('-s', '--serve', action="store_true",
                    help='runs in server mode')

parser.add_argument('pubkey', type=str,
                    help="the client peer's public key (or the server's if running in server mode)")

parser.add_argument('arg', type=str,
                    help="The server's address (or the first available IP address if running in server mode)")

args = parser.parse_args()

def eprint(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)

def accept(sock):
  conn, addr = sock.accept()  # accept the initial connection
  eprint('Accepted new connection: {:} from ip {:}'.format(conn, addr))
  conn.setblocking(False)
  sel.register(conn, socketserver.selectors.EVENT_READ, get_data)
  return conn

def get_data(conn):
  data = conn.recv(1024)  # Should be ready
  if data:
    pass
  else:
    #eprint('closing', conn)
    sel.unregister(conn)
    conn.close()
  return (conn, data)

def setupServer(listen_ip, listen_port):
  server = socketserver.TCPServer((listen_ip, listen_port), socketserver.StreamRequestHandler, bind_and_activate = False)
  server.timeout = None  # never timeout when waiting for connection
  server.allow_reuse_address = True
  server.server_bind()
  server.server_activate()
  return server


if args.serve == True:  # server mode, run in this mode to tell potential client peers your public key and what IP address to use
    next_address = ipaddress.ip_address(args.arg)

    sel = socketserver.selectors.DefaultSelector()

    srv = setupServer(listen_ip, this_server_port)
    sel.register(srv.socket, socketserver.selectors.EVENT_READ, accept)

    eprint(f'Wireguard request server started listening on port {this_server_port}')
    while True:
        events = sel.select()
        for key, mask in events:
            callback = key.data
            callback_return = callback(key.fileobj)
            if type(callback_return) == socketserver.socket.socket:
                # this was a new connection
                print()
                conn = callback_return
                #port = conn.getsockname()[1]
            else:
                # this was not a new connection (either disconnect or new data)
                conn, data = callback_return
                if (not conn._closed) and (len(data) == pubkey_len):
                    client_key = data.decode()
                    eprint(f'Someone sent us 44 bytes @ {datetime.datetime.now()}')
                    print()
                    try:
                        message = f"{args.pubkey}{next_address},{args.port}"
                        conn.sendall(message.encode()) # send away our public key, the address the client should use and our server port
                        print("[Peer]")
                        print("# who?")
                        print(f'PublicKey = {client_key}')
                        print(f'AllowedIPs = {next_address}/32')
                        print()
                    except:
                        eprint('WARNING: Unable to answer.')
                    try:
                        next_address += 1 # this crashes when it runs out!
                    except:
                        raise(ValueError('Out of addresses.'))
else: # client mode. run in this mode to get: the server's public key, the next available IP and the server's listening port
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.settimeout(10)  # set the connection timeout to this many seconds
    ret_code = 1  # default error
    
    # Connect to server (with retries)
    t0 = time.time()
    while (time.time()-t0) < connection_timeout_s:
        try:
            sock.connect((args.arg, this_server_port))
        except Exception as e:
            pass

        try:
            peerinfo = sock.getpeername()
            if len(peerinfo) == 2:
                ret_code = 1  # default error
                break  # break out of connection loop
        except Exception as e:
            pass

        ret_code = 2  # connection timeout error

    try:
        if ret_code == 1:  # we connected
            # send data
            sock.sendall(args.pubkey.encode())

            # Receive data from the server and shut down
            result = sock.recv(1024).decode()
            rltlen = len(result)
            if rltlen >= (pubkey_len+7):
                server_key = result[:pubkey_len]
                not_server_key = result[pubkey_len:]
                my_ip, server_port = not_server_key.split(',')
                my_ip = ipaddress.ip_address(my_ip)  # convert to ip
                server_port = int(server_port)
                my_network = ipaddress.ip_network(str(my_ip)+'/'+CIDR, strict=False)
                wg_server = args.arg  # wg_server must run on the same host as wg-request server
                print("[Interface]")
                print(f"Address = {my_ip}/{CIDR}")
                print(f"PrivateKey = {args.private_key}")
                print()
                print("[Peer]")
                print("# who? (the server)")
                print(f"PublicKey = {server_key}")
                print(f"AllowedIPs = {my_network.network_address+1}/32, {my_network}")
                print("PersistentKeepalive = 25")
                print(f"Endpoint = {wg_server}:{server_port}")
                ret_code = 0  # no error
            else:
                ret_code = 3  # bad retlen error
    except Exception as e:
          ret_code = 4  # crash after connection error
    finally:
        sock.close()

    sys.exit(ret_code)
